# -*- coding: utf-8 -*-
"""TH4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiFCZCKcYKs9rcmWZmwONx1koCAUehkW
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
# Đọc dữ liệu
df = pd.read_csv('/content/web_traffic.csv')

df

df['Timestamp'] = pd.to_datetime(df['Timestamp'])

plt.figure(figsize=(12,4))
plt.plot(df['Timestamp'], df['TrafficCount'])
plt.xlabel('Thời gian')
plt.ylabel('Lưu lượng')
plt.title('Lưu lượng Internet trong 2 tuần')
plt.show()

traffic = df['TrafficCount'].values
n = len(traffic)
dt = 1
freqs = np.fft.fftfreq(n, d=dt)
fft_values = np.fft.fft(traffic)
amplitude = np.abs(fft_values) / n

# Chỉ lấy phần dương
positive_freqs = freqs[:n//2]
positive_amplitude = amplitude[:n//2]

# Vẽ phổ biên độ
plt.figure(figsize=(12,4))
plt.plot(positive_freqs, positive_amplitude)
plt.xlabel('Tuần số ( Chu kỳ mỗi giờ)')
plt.ylabel('Biên độ')
plt.title('Phổ tần số của lưu lượng truy cập Internet')
plt.show()

dominant_idx = np.argmax(positive_amplitude[1:]) + 1
dominant_freq = positive_freqs[dominant_idx]
omega = 2 * np.pi * dominant_freq
print(f"Tần số: {omega:.4f}")
print(f"Tần số mạnh nhất : {dominant_freq:.4f} cycles/hour → Chu kỳ ≈ {1/dominant_freq:.2f} hours")

# Fit sóng sin vào dữ liệu
def sin_func(t, A, omega, phase, offset):
    return A * np.sin(omega * t + phase) + offset

t = np.arange(n)
popt, _ = curve_fit(sin_func, t, traffic, p0=[np.std(traffic), omega, 0, np.mean(traffic)])

# Dự báo 48 giờ tới
future_t = np.arange(n, n + 48)
future_traffic = sin_func(future_t, *popt)

# Tạo mốc thời gian tương lai
future_time = pd.date_range(df['Timestamp'].iloc[-1], periods=49, freq='H')[1:]


# Vẽ dự báo
plt.figure(figsize=(12,4))
plt.plot(df['Timestamp'], traffic, label='Observed')
plt.plot(future_time, future_traffic, label='Forecast', color='red')
plt.xlabel('Thời gian')
plt.ylabel('Lưu lượng')
plt.legend()
plt.title('Dự báo lưu lượng 2 ngày tới')
plt.show()
# In ra giá trị dự báo
forecast_df = pd.DataFrame({'Time': future_time, 'ForecastTraffic': future_traffic})
print(forecast_df)

df['hour'] = df['Timestamp'].dt.hour
avg_by_hour = df.groupby('hour')['TrafficCount'].mean()

plt.figure(figsize=(8,4))
plt.plot(avg_by_hour.index, avg_by_hour.values, marker='o')
plt.xlabel('Giờ')
plt.ylabel('Lưu lượng truy cập trung bình')
plt.title('Lưu lượng truy cập trung bình theo giờ trong ngày')
plt.xticks(range(0,24))
plt.grid(True)
plt.show()

df['weekday'] = df['Timestamp'].dt.day_name()

order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Tính trung bình lưu lượng theo thứ
avg_by_day = df.groupby('weekday')['TrafficCount'].mean().reindex(order)

# Vẽ biểu đồ
plt.figure(figsize=(8,4))
plt.plot(avg_by_day.index, avg_by_day.values, marker='o')
plt.xlabel('Ngày')
plt.ylabel('Lưu lượng truy cập trung bình')
plt.title('Lưu lượng truy cập trung bình theo ngày trong tuần')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()